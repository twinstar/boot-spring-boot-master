//description = """//
//Project name: ${project.name}//

//'부트 스프링 부트' 도서를 보며 참고할 수 있는 예제 프로젝트입니다.
//"""

buildscript {
    ext {
        springBootVersion = '2.0.6.RELEASE'
        gradleGitPropertiesVersion = '1.4.17'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:${gradleGitPropertiesVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.gorylenko.gradle-git-properties'

version = '1.1.0.RELEASE'

jar {
    baseName = "${project.name}"
    version = "${project.version}"
}

bootJar {
    manifest {
        attributes("Implementation-Title": "${project.name}",
                "Implementation-Version": "${project.version}")
    }
}

group = "io.honeymon.boot"
version = "${jar.version}"

sourceCompatibility = 1.8

// 소스 인코딩 지정방법 1
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// dependencies::start[]

//exclude common-logging
[configurations.runtime, configurations.default]*.exclude(module: 'commons-logging')

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

configurations {
    compile.exclude module: 'tomcat-jdbc'
}

dependencyManagement {
//	dependencies {
//		compile('org.springframework.boot:spring-boot-starter-web:2.0.3.RELEASE')
//	}
//
//    imports {
//        mavenBom 'org.springframework.boot:spring-boot-starter-parent:2.0.1.RELEASE'
//    }
}

dependencies {
//<<<<<<< HEAD
	compile('org.projectlombok:lombok:1.18.2')
	
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-configuration-processor')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-actuator')

    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    //compile('org.thymeleaf:thymeleaf-spring5')

    compile('org.springframework.boot:spring-boot-starter-tomcat')

    //Java9 이상부터는 jaxb 의존성을 추가해야함
    compile("javax.xml.bind:jaxb-api")

    compile('com.h2database:h2')



    testCompile('org.springframework.boot:spring-boot-starter-test')
}

// dependencies::end[]

springBoot {
    /**
     * Spring Boot 리패키징 시 build-info에 추가될 속성
     */
    buildInfo {
        properties {
            additionalProperties = [
                    'written-by': 'honeymon'
            ]
        }
    }
}

// 쉘스크립트처럼 실행가능한 바이너리 jar 만들기
bootJar {
    launchScript()
}

gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "GMT"
}

// boot jar error
generateGitProperties {
	onlyIf {
		!source.isEmpty()
	}
}
// gradle task javadoc error 
//https://github.com/nostra13/Android-Universal-Image-Loader/issues/1086
tasks.withType(Javadoc) {
options.addStringOption('Xdoclint:none', '-quiet')
options.addStringOption('encoding', 'UTF-8')
options.addStringOption('charSet', 'UTF-8')
}
